create table disemp (
EMPno  number,
ENAME varchar(30) ,
JOB varchar(30) ,
MGR number(4),
HIREDATE date,
SAL number(7,2),
COMM number(7,2),
DEPTNO number(2)
);
INSERT INTO disemp values (7369,'SMITH','CLERK',7902,    str_to_date('1980-11-17','%Y-%m-%d'),800,NULL, 20) ;
INSERT INTO disemp VALUES (7499, 'ALLEN','SALESMAN',7698,str_to_date('1981-01-20','%Y-%m-%d'),1600,300,30) ;
INSERT INTO disemp VALUES (7521,'WARD','SALESMAN',7698,  str_to_date('1981-01-22','%Y-%m-%d'),1250, 500, 30) ;
INSERT INTO disemp VALUES (7566,'JONES','MANAGER',7839,  str_to_date('1981-04-02','%Y-%m-%d'), 2975, NULL, 20) ;
INSERT INTO disemp VALUES (7654,'MARTIN','SALESMAN', 7698, str_to_date('1981-09-28','%Y-%m-%d'), 1250, 1400, 30) ;
INSERT INTO disemp VALUES (7698, 'BLAKE','MANAGER', 7839,  str_to_date('1981-03-01','%Y-%m-%d'), 2850, NULL, 30) ;
INSERT INTO disemp VALUES (7782, 'CLARK','MANAGER', 7839,  str_to_date('1981-06-09','%Y-%m-%d'), 2450, NULL, 10) ;
insert into disemp values (7788,'SCOTT','ANALYST', 7566,   str_to_date('1987-04-19','%Y-%m-%d'), 3000, null, 20) ;
INSERT INTO disemp VALUES (7839, 'KING','PRESIDENT', NULL, str_to_date('1981-11-17','%Y-%m-%d'), 5000, NULL, 10) ;
INSERT INTO disemp VALUES (7844, 'TURNER','SALESMAN', 7698, str_to_date('1981-09-08','%Y-%m-%d'), 1500, 0, 30) ;
INSERT INTO disemp VALUES(7876, 'ADAMS','CLERK', 7788,     str_to_date('1987-05-23','%Y-%m-%d'), 1100, NULL, 20) ;
INSERT INTO disemp VALUES(7900, 'JAMES', 'CLEARK', 7698,   str_to_date('1981-11-03','%Y-%m-%d'), 950, NULL, 30) ;
INSERT INTO disemp VALUES(7902, 'FORD','ANALYST',7566,     str_to_date('1981-11-03','%Y-%m-%d'), 3000, NULL, 20) ;
INSERT INTO disemp VALUES(7934,'MILLER','CLERK', 7782,     str_to_date('1982-01-23','%Y-%m-%d'), 1300,NULL, 10) ;
drop table EMP;
create table EMP (
EMPno  number,
ENAME varchar(30),
JOB varchar(30),
MGR number(4),
HIREDATE date,
SAL number(7,2),
COMM number(7,2),
DEPTNO number(2)
);
insert into EMP values (7369,'SMITH','CLERK',7902,    str_to_date('1980-12-17','%Y-%m-%d'),800,NULL, 20) ;
INSERT INTO EMP VALUES (7499, 'ALLEN','SALESMAN',7698,str_to_date('1981-02-20','%Y-%m-%d'),1600,300,30) ;
INSERT INTO EMP VALUES (7521,'WARD','SALESMAN',7698,  str_to_date('1981-02-22','%Y-%m-%d'),1250, 500, 30) ;
INSERT INTO EMP VALUES (7566,'JONES','MANAGER',7839,  str_to_date('1981-08-02','%Y-%m-%d'), 2975, NULL, 20) ;
INSERT INTO EMP VALUES (7654,'MARTIN','SALESMAN', 7698, str_to_date('1981-09-28','%Y-%m-%d'), 1250, 1400, 30) ;
INSERT INTO EMP VALUES (7698, 'BLAKE','MANAGER', 7839,  str_to_date('1981-05-01','%Y-%m-%d'), 2850, NULL, 30) ;
INSERT INTO EMP VALUES (7782, 'CLARK','MANAGER', 7839,  str_to_date('1981-06-09','%Y-%m-%d'), 2450, NULL, 10) ;
insert into EMP values (7788,'SCOTT','ANALYST', 7566,   str_to_date('1987-08-19','%Y-%m-%d'), 3000, null, 20) ;
INSERT INTO EMP VALUES (7839, 'KING','PRESIDENT', NULL, str_to_date('1981-11-17','%Y-%m-%d'), 5000, NULL, 10) ;
INSERT INTO EMP VALUES (7844, 'TURNER','SALESMAN', 7698, str_to_date('1981-09-08','%Y-%m-%d'), 1500, 0, 30) ;
INSERT INTO EMP VALUES(7876, 'ADAMS','CLERK', 7788,     str_to_date('1987-05-23','%Y-%m-%d'), 1100, NULL, 20) ;
INSERT INTO EMP VALUES(7900, 'JAMES', 'CLEARK', 7698,   str_to_date('1981-12-03','%Y-%m-%d'), 950, NULL, 30) ;
INSERT INTO EMP VALUES(7902, 'FORD','ANALYST',7566,     str_to_date('1981-12-03','%Y-%m-%d'), 3000, NULL, 20) ;
INSERT INTO EMP VALUES(7934,'MILLER','CLERK', 7782,     str_to_date('1982-06-23','%Y-%m-%d'), 1300,NULL, 10) ;
drop table emp1;
CREATE TABLE emp1 (
empno    VARCHAR(4000) NOT NULL,
ename    VARCHAR(14),
job      VARCHAR(9),
mgr      VARCHAR(4000),
hiredate DATE,
sal      NUMBER(7,2),
comm     NUMBER(7,2),
deptno   NUMBER(2));
INSERT INTO emp1 values (7369, 'SMITH', 'CLERK', 7902, str_to_date('1980-12-17', '%Y-%m-%d'), 800, null, 20);
INSERT INTO emp1 values (7499, 'ALLEN', 'SALESMAN', 7698, str_to_date('1981-02-20', '%Y-%m-%d'), 1600, 300, 30);
INSERT INTO emp1 values (7521, 'WARD', 'SALESMAN', 7698, str_to_date('1981-02-22', '%Y-%m-%d'), 1250, 500, 30);
INSERT INTO emp1 values (7566, 'JONES', 'MANAGER', 7839, str_to_date('1981-08-02', '%Y-%m-%d'), 2975, null, 20);
INSERT INTO emp1 values (7654, 'MARTIN', 'SALESMAN', 7698, str_to_date('1981-09-28', '%Y-%m-%d'), 1250, 1400, 30);
INSERT INTO emp1 values (7698, 'BLAKE', 'MANAGER', 7839, str_to_date('1981-05-01', '%Y-%m-%d'), 2850, null, 30);
INSERT INTO emp1 values (7782, 'CLARK', 'MANAGER', 7839, str_to_date('1981-06-09' , '%Y-%m-%d'), 2450, null, 10);
INSERT INTO emp1 values (7788, 'SCOTT', 'ANALYST', 7566, str_to_date('1987-08-19', '%Y-%m-%d'), 3000, null, 20);
INSERT INTO emp1 values (7839, 'KING', 'PRESIDENT', null, str_to_date('1981-11-17', '%Y-%m-%d'), 5000, null, 10);
INSERT INTO emp1 values (7844, 'TURNER', 'SALESMAN', 7698, str_to_date('1981-09-08', '%Y-%m-%d'), 1500, 0, 30);
INSERT INTO emp1 values (7876, 'ADAMS', 'CLERK', 7788, str_to_date('1987-05-23', '%Y-%m-%d'), 1100, null, 20);
INSERT INTO emp1 values (7900, 'JAMES', 'CLERK', 7698, str_to_date('1981-12-03', '%Y-%m-%d'), 950, null, 30);
INSERT INTO emp1 values (7902, 'FORD', 'ANALYST', 7566, str_to_date('1981-12-03', '%Y-%m-%d'), 3000, null, 20);
INSERT INTO emp1 values (7934, 'MILLER', 'CLERK', 7782, str_to_date('1982-01-23', '%Y-%m-%d'), 1300, null, 10);
INSERT INTO emp1 values (8100, 'Eve', 'MANAGER', 7839, str_to_date('1984-05-01', '%Y-%m-%d'), 2850, null, 30);
INSERT INTO emp1 values (8101, 'Eve1', 'MANAGER', 8100, str_to_date('1984-05-01','%Y-%m-%d'), 2850, null, 30);
INSERT INTO emp1 values (8108, 'Eve8', 'CLERK', 8101, str_to_date('1984-05-01', '%Y-%m-%d'), 2850, null, 30);
drop table dsemp;
create table dsemp (id int, name varchar(20), leaderid int) partition by hash (id) partitions 3;
insert into dsemp values(1, 'A', '0');
insert into dsemp values(2, 'AA', '1');
insert into dsemp values(3, 'AB', '1');
insert into dsemp values(4, 'ABA', '3');
insert into dsemp values(5, 'AAA', '2');
insert into dsemp values(6, 'ABB', '3');
insert into dsemp values(7, 'AAA', '5');
insert into dsemp values(8, 'AAA', '7');
insert into dsemp values(9, 'AAAA', '5');
insert into dsemp values(10, 'AAAB', '5');
insert into dsemp values(11, 'AAAC', '5');
insert into dsemp values(12, 'AAAA', '5');
create table dsemp1 (id int, name varchar(20), leaderid int) partition by hash (leaderid) partitions 3;
insert into dsemp1 values(1, 'A', '0');
insert into dsemp1 values(2, 'AA', '1');
insert into dsemp1 values(3, 'AB', '1');
insert into dsemp1 values(4, 'ABA', '3');
insert into dsemp1 values(5, 'AAA', '2');
insert into dsemp1 values(6, 'ABB', '3');
insert into dsemp1 values(7, 'AAA', '5');
insert into dsemp1 values(8, 'AAA', '7');
insert into dsemp1 values(9, 'AAAA', '5');
insert into dsemp1 values(10, 'AAAB', '5');
insert into dsemp1 values(11, 'AAAC', '5');
insert into dsemp1 values(12, 'AAAA', '5');
result_format: 4

##############################
##   section 1  聚合一张表是分布式表（disemp）
##   section 2  聚合的两表是分布式表（disemp，emp1）
##   section 3  聚合的两表在join条件上可能形成wise join（disemp，emp1）
##   section 4  额外添加recursive member变化
##############################

##############################
##   section 1  聚合一张表是分布式表（disemp）
##############################
## =======================================================================
## Test Case 1:
## - recursive WITH Query: Nested Loop Join
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_NL(r e) */  e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |29       |219 |
|1 | RECURSIVE UNION ALL|    |29       |215 |
|2 |  TABLE SCAN        |e   |1        |46  |
|3 |  HASH JOIN         |    |28       |157 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_NL(r e) */  e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 2:
## - recursive WITH Query: SORT MERGE Join
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_MERGE(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |29       |219 |
|1 | RECURSIVE UNION ALL|    |29       |215 |
|2 |  TABLE SCAN        |e   |1        |46  |
|3 |  HASH JOIN         |    |28       |157 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_MERGE(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 3:
## - recursive WITH Query: Hash Join
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;


| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |29       |219 |
|1 | RECURSIVE UNION ALL|    |29       |215 |
|2 |  TABLE SCAN        |e   |1        |46  |
|3 |  HASH JOIN         |    |28       |157 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 4:
## - recursive WITH Query: Join in Initialisation Branch
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT /*+ USE_NL(e d) */ e.ename, e.mgr, e.empno
    FROM disemp e, disemp d 
    WHERE e.sal = d. sal
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e, disemp d
    WHERE r.empno = e.mgr and e.sal = d.sal
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |47       |374 |
|1 | RECURSIVE UNION ALL|    |47       |368 |
|2 |  HASH JOIN         |    |17       |110 |
|3 |   TABLE SCAN       |d   |14       |39  |
|4 |   TABLE SCAN       |e   |14       |40  |
|5 |  HASH JOIN         |    |30       |239 |
|6 |   HASH JOIN        |    |17       |110 |
|7 |    TABLE SCAN      |d   |14       |39  |
|8 |    TABLE SCAN      |e   |14       |40  |
|9 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([e.SAL = d.SAL]), other_conds(nil)
  3 - output([d.SAL]), filter(nil), 
      access([d.SAL]), partitions(p0)
  4 - output([e.SAL], [e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      access([e.SAL], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  5 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  6 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([e.SAL = d.SAL]), other_conds(nil)
  7 - output([d.SAL]), filter(nil), 
      access([d.SAL]), partitions(p0)
  8 - output([e.MGR], [e.SAL], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.SAL], [e.ENAME], [e.EMPno]), partitions(p0)
  9 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |


WITH rw (ename, mgr, empno) AS
(
    SELECT /*+ USE_NL(e d) */ e.ename, e.mgr, e.empno
    FROM disemp e, disemp d 
    WHERE e.sal = d. sal
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e, disemp d
    WHERE r.empno = e.mgr and e.sal = d.sal
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| SMITH  |  7369 | 7902 |
| ALLEN  |  7499 | 7698 |
| WARD   |  7521 | 7698 |
| WARD   |  7521 | 7698 |
| JONES  |  7566 | 7839 |
| MARTIN |  7654 | 7698 |
| MARTIN |  7654 | 7698 |
| BLAKE  |  7698 | 7839 |
| CLARK  |  7782 | 7839 |
| SCOTT  |  7788 | 7566 |
| SCOTT  |  7788 | 7566 |
| KING   |  7839 | NULL |
| TURNER |  7844 | 7698 |
| ADAMS  |  7876 | 7788 |
| JAMES  |  7900 | 7698 |
| FORD   |  7902 | 7566 |
| FORD   |  7902 | 7566 |
| MILLER |  7934 | 7782 |
| WARD   |  7521 | 7698 |
| SMITH  |  7369 | 7902 |
| SMITH  |  7369 | 7902 |
| JONES  |  7566 | 7839 |
| BLAKE  |  7698 | 7839 |
| CLARK  |  7782 | 7839 |
| ADAMS  |  7876 | 7788 |
| ADAMS  |  7876 | 7788 |
| MILLER |  7934 | 7782 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| WARD   |  7521 | 7698 |
| MARTIN |  7654 | 7698 |
| MARTIN |  7654 | 7698 |
| TURNER |  7844 | 7698 |
| JAMES  |  7900 | 7698 |
| SCOTT  |  7788 | 7566 |
| SCOTT  |  7788 | 7566 |
| FORD   |  7902 | 7566 |
| FORD   |  7902 | 7566 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SCOTT  |  7788 | 7566 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| MILLER |  7934 | 7782 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
| ADAMS  |  7876 | 7788 |
| SMITH  |  7369 | 7902 |
| SMITH  |  7369 | 7902 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 6:
## - recursive WITH Query: Hash Join without using hints
##                         Static input on build side and fits in memory
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM disemp e, rw r
    WHERE e.mgr = r.empno 
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = r.empno]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM disemp e, rw r
    WHERE e.mgr = r.empno 
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 7:
## - recursive WITH Query: Hash Join without using hints
##                         Static input on probe side and fits in memory
## =======================================================================
explain  
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## 测试8-15都是在测试join的顺序或者hint的顺序
## Test Case 8:
## - recursive WITH Query: Join Order tests 
##                         pump >< disemp >< emp1 
## =======================================================================
explain  
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, disemp e, emp1 n
  WHERE r.mgr = e.empno and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([r.mgr = e.EMPno]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = cast(n.empno, DECIMAL(-1, -1))]), other_conds(nil)
  10 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |



WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, disemp e, emp1 n
  WHERE r.mgr = e.empno and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 9:
## - recursive WITH Query: Join Order tests 
##                         disemp >< pump >< emp1 
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM disemp e, rw r, emp1 n
  WHERE e.empno = r.mgr and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([e.EMPno = r.mgr]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = cast(n.empno, DECIMAL(-1, -1))]), other_conds(nil)
  10 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM disemp e, rw r, emp1 n
  WHERE e.empno = r.mgr and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 10:
## - recursive WITH Query: Join Order tests 
##                         disemp >< emp1 >< pump  
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM disemp e, emp1 n, rw r
  WHERE e.mgr = n.empno and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([e.EMPno = r.mgr]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = cast(n.empno, DECIMAL(-1, -1))]), other_conds(nil)
  10 - output([e.MGR], [e.EMPno], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.MGR], [e.EMPno], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |



WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM disemp e, emp1 n, rw r
  WHERE e.mgr = n.empno and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 11:
## - recursive WITH Query: Join Order tests 
##                         emp1 >< disemp >< pump  
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, disemp e, rw r
  WHERE n.empno = e.mgr and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([e.EMPno = r.mgr]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([cast(n.empno, DECIMAL(-1, -1)) = e.MGR]), other_conds(nil)
  10 - output([e.MGR], [e.EMPno], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.MGR], [e.EMPno], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |



WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, disemp e, rw r
  WHERE n.empno = e.mgr and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 12:
## - recursive WITH Query: Join Order tests 
##                         pump >< disemp
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 13:
## - recursive WITH Query: Join Order tests 
##                         disemp >< pump
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM  disemp e, rw r
    WHERE e.mgr = r.empno
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = r.empno]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM  disemp e, rw r
    WHERE e.mgr = r.empno
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 14:
## - recursive WITH Query: Join Order tests 
##                         emp1 >< pump >< disemp
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, rw r, disemp e
  WHERE n.empno = e.mgr and r.mgr = e.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([r.mgr = e.EMPno]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([cast(n.empno, DECIMAL(-1, -1)) = e.MGR]), other_conds(nil)
  10 - output([e.MGR], [e.EMPno], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.MGR], [e.EMPno], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |



WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, rw r, disemp e
  WHERE n.empno = e.mgr and r.mgr = e.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+


## =======================================================================
## Test Case 15:
## - recursive WITH Query: Join Order tests 
##                         pump >< emp1 >< disemp
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, emp1 n, disemp e
  WHERE r.mgr = e.empno and n.empno = e.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([r.mgr = e.EMPno]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([cast(n.empno, DECIMAL(-1, -1)) = e.MGR]), other_conds(nil)
  10 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, emp1 n, disemp e
  WHERE r.mgr = e.empno and n.empno = e.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 16:
## - recursive WITH Query: Join Skew handling. No local filter
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+


## =======================================================================
## Test Case 17:
## - recursive WITH Query: Join Skew handling with an additional local filter
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr and e.empno < e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |10       |179 |
|1 | RECURSIVE UNION ALL|    |10       |177 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |8        |127 |
|4 |   TABLE SCAN       |e   |5        |42  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.EMPno], [e.ENAME]), filter([e.EMPno < e.MGR]), 
      access([e.MGR], [e.EMPno], [e.ENAME]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr and e.empno < e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
+--------+-------+------+

##############################
##   section 2  聚合的两表是分布式表（disemp，emp1）
##############################
##  
##  emp1 也进行分布式化
drop table emp1;
CREATE TABLE emp1 (
   empno    VARCHAR(4000) NOT NULL,
   ename    VARCHAR(14),
   job      VARCHAR(9),
   mgr      VARCHAR(4000),
   hiredate DATE,
   sal      NUMBER(7,2),
   comm     NUMBER(7,2),
   deptno   NUMBER(2)
);

INSERT INTO emp1 values (7369, 'SMITH', 'CLERK', 7902, str_to_date('1980-12-17', '%Y-%m-%d'), 800, null, 20);
INSERT INTO emp1 values (7499, 'ALLEN', 'SALESMAN', 7698, str_to_date('1981-02-20', '%Y-%m-%d'), 1600, 300, 30);
INSERT INTO emp1 values (7521, 'WARD', 'SALESMAN', 7698, str_to_date('1981-02-22', '%Y-%m-%d'), 1250, 500, 30);
INSERT INTO emp1 values (7566, 'JONES', 'MANAGER', 7839, str_to_date('1981-08-02', '%Y-%m-%d'), 2975, null, 20);
INSERT INTO emp1 values (7654, 'MARTIN', 'SALESMAN', 7698, str_to_date('1981-09-28', '%Y-%m-%d'), 1250, 1400, 30);
INSERT INTO emp1 values (7698, 'BLAKE', 'MANAGER', 7839, str_to_date('1981-05-01', '%Y-%m-%d'), 2850, null, 30);
INSERT INTO emp1 values (7782, 'CLARK', 'MANAGER', 7839, str_to_date('1981-06-09' , '%Y-%m-%d'), 2450, null, 10);
INSERT INTO emp1 values (7788, 'SCOTT', 'ANALYST', 7566, str_to_date('1987-08-19', '%Y-%m-%d'), 3000, null, 20);
INSERT INTO emp1 values (7839, 'KING', 'PRESIDENT', null, str_to_date('1981-11-17', '%Y-%m-%d'), 5000, null, 10);
INSERT INTO emp1 values (7844, 'TURNER', 'SALESMAN', 7698, str_to_date('1981-09-08', '%Y-%m-%d'), 1500, 0, 30);
INSERT INTO emp1 values (7876, 'ADAMS', 'CLERK', 7788, str_to_date('1987-05-23', '%Y-%m-%d'), 1100, null, 20);
INSERT INTO emp1 values (7900, 'JAMES', 'CLERK', 7698, str_to_date('1981-12-03', '%Y-%m-%d'), 950, null, 30);
INSERT INTO emp1 values (7902, 'FORD', 'ANALYST', 7566, str_to_date('1981-12-03', '%Y-%m-%d'), 3000, null, 20);
INSERT INTO emp1 values (7934, 'MILLER', 'CLERK', 7782, str_to_date('1982-01-23', '%Y-%m-%d'), 1300, null, 10);
INSERT INTO emp1 values (8100, 'Eve', 'MANAGER', 7839, str_to_date('1984-05-01', '%Y-%m-%d'), 2850, null, 30);
INSERT INTO emp1 values (8101, 'Eve1', 'MANAGER', 8100, str_to_date('1984-05-01','%Y-%m-%d'), 2850, null, 30);
INSERT INTO emp1 values (8108, 'Eve8', 'CLERK', 8101, str_to_date('1984-05-01', '%Y-%m-%d'), 2850, null, 30);

## =======================================================================
## Test Case 1:
## - recursive WITH Query: Nested Loop Join
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_NL(r e) */  e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_NL(r e) */  e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 2:
## - recursive WITH Query: SORT MERGE Join
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_MERGE(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_MERGE(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 3:
## - recursive WITH Query: Hash Join
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 4:
## - recursive WITH Query: Join in Initialisation Branch
## 与oracle的结果顺序不一样
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT /*+ USE_NL(e d) */ e.ename, e.mgr, e.empno
    FROM disemp e, disemp d 
    WHERE e.sal = d. sal
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e, disemp d
    WHERE r.empno = e.mgr and e.sal = d.sal
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |47       |374 |
|1 | RECURSIVE UNION ALL|    |47       |368 |
|2 |  HASH JOIN         |    |17       |110 |
|3 |   TABLE SCAN       |d   |14       |39  |
|4 |   TABLE SCAN       |e   |14       |40  |
|5 |  HASH JOIN         |    |30       |239 |
|6 |   HASH JOIN        |    |17       |110 |
|7 |    TABLE SCAN      |d   |14       |39  |
|8 |    TABLE SCAN      |e   |14       |40  |
|9 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([e.SAL = d.SAL]), other_conds(nil)
  3 - output([d.SAL]), filter(nil), 
      access([d.SAL]), partitions(p0)
  4 - output([e.SAL], [e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      access([e.SAL], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  5 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  6 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([e.SAL = d.SAL]), other_conds(nil)
  7 - output([d.SAL]), filter(nil), 
      access([d.SAL]), partitions(p0)
  8 - output([e.MGR], [e.SAL], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.SAL], [e.ENAME], [e.EMPno]), partitions(p0)
  9 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


WITH rw (ename, mgr, empno) AS
(
    SELECT /*+ USE_NL(e d) */ e.ename, e.mgr, e.empno
    FROM disemp e, disemp d 
    WHERE e.sal = d. sal
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e, disemp d
    WHERE r.empno = e.mgr and e.sal = d.sal
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| SMITH  |  7369 | 7902 |
| ALLEN  |  7499 | 7698 |
| WARD   |  7521 | 7698 |
| WARD   |  7521 | 7698 |
| JONES  |  7566 | 7839 |
| MARTIN |  7654 | 7698 |
| MARTIN |  7654 | 7698 |
| BLAKE  |  7698 | 7839 |
| CLARK  |  7782 | 7839 |
| SCOTT  |  7788 | 7566 |
| SCOTT  |  7788 | 7566 |
| KING   |  7839 | NULL |
| TURNER |  7844 | 7698 |
| ADAMS  |  7876 | 7788 |
| JAMES  |  7900 | 7698 |
| FORD   |  7902 | 7566 |
| FORD   |  7902 | 7566 |
| MILLER |  7934 | 7782 |
| WARD   |  7521 | 7698 |
| SMITH  |  7369 | 7902 |
| SMITH  |  7369 | 7902 |
| JONES  |  7566 | 7839 |
| BLAKE  |  7698 | 7839 |
| CLARK  |  7782 | 7839 |
| ADAMS  |  7876 | 7788 |
| ADAMS  |  7876 | 7788 |
| MILLER |  7934 | 7782 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| WARD   |  7521 | 7698 |
| MARTIN |  7654 | 7698 |
| MARTIN |  7654 | 7698 |
| TURNER |  7844 | 7698 |
| JAMES  |  7900 | 7698 |
| SCOTT  |  7788 | 7566 |
| SCOTT  |  7788 | 7566 |
| FORD   |  7902 | 7566 |
| FORD   |  7902 | 7566 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SCOTT  |  7788 | 7566 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| MILLER |  7934 | 7782 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
| ADAMS  |  7876 | 7788 |
| SMITH  |  7369 | 7902 |
| SMITH  |  7369 | 7902 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 6:
## - recursive WITH Query: Hash Join without using hints
##                         Static input on build side and fits in memory
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM disemp e, rw r
    WHERE e.mgr = r.empno 
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = r.empno]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM disemp e, rw r
    WHERE e.mgr = r.empno 
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 7:
## - recursive WITH Query: Hash Join without using hints
##                         Static input on probe side and fits in memory
## =======================================================================
explain  
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| BLAKE  |  7698 | 7839 |
| CLARK  |  7782 | 7839 |
| JONES  |  7566 | 7839 |
| ALLEN  |  7499 | 7698 |
| JAMES  |  7900 | 7698 |
| MARTIN |  7654 | 7698 |
| TURNER |  7844 | 7698 |
| WARD   |  7521 | 7698 |
| MILLER |  7934 | 7782 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## 测试8-15都是在测试join的顺序或者hint的顺序
## Test Case 8:
## - recursive WITH Query: Join Order tests 
##                         pump >< disemp >< emp1 
## =======================================================================
explain  
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, disemp e, emp1 n
  WHERE r.mgr = e.empno and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([r.mgr = e.EMPno]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = cast(n.empno, DECIMAL(-1, -1))]), other_conds(nil)
  10 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |



WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, disemp e, emp1 n
  WHERE r.mgr = e.empno and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 9:
## - recursive WITH Query: Join Order tests 
##                         disemp >< pump >< emp1 
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM disemp e, rw r, emp1 n
  WHERE e.empno = r.mgr and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([e.EMPno = r.mgr]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = cast(n.empno, DECIMAL(-1, -1))]), other_conds(nil)
  10 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |


WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM disemp e, rw r, emp1 n
  WHERE e.empno = r.mgr and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 10:
## - recursive WITH Query: Join Order tests 
##                         disemp >< emp1 >< pump  
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM disemp e, emp1 n, rw r
  WHERE e.mgr = n.empno and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([e.EMPno = r.mgr]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = cast(n.empno, DECIMAL(-1, -1))]), other_conds(nil)
  10 - output([e.MGR], [e.EMPno], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.MGR], [e.EMPno], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |


WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM disemp e, emp1 n, rw r
  WHERE e.mgr = n.empno and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 11:
## - recursive WITH Query: Join Order tests 
##                         emp1 >< disemp >< pump  
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, disemp e, rw r
  WHERE n.empno = e.mgr and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([e.EMPno = r.mgr]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([cast(n.empno, DECIMAL(-1, -1)) = e.MGR]), other_conds(nil)
  10 - output([e.MGR], [e.EMPno], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.MGR], [e.EMPno], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |




WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, disemp e, rw r
  WHERE n.empno = e.mgr and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 12:
## - recursive WITH Query: Join Order tests 
##                         pump >< disemp
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 13:
## - recursive WITH Query: Join Order tests 
##                         disemp >< pump
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM  disemp e, rw r
    WHERE e.mgr = r.empno
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = r.empno]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM  disemp e, rw r
    WHERE e.mgr = r.empno
)
SELECT /*+log_level(DEBUG)*/ ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 14:
## - recursive WITH Query: Join Order tests 
##                         emp1 >< pump >< disemp
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, rw r, disemp e
  WHERE n.empno = e.mgr and r.mgr = e.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([r.mgr = e.EMPno]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([cast(n.empno, DECIMAL(-1, -1)) = e.MGR]), other_conds(nil)
  10 - output([e.MGR], [e.EMPno], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.MGR], [e.EMPno], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |



WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, rw r, disemp e
  WHERE n.empno = e.mgr and r.mgr = e.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 15:
## - recursive WITH Query: Join Order tests 
##                         pump >< emp1 >< disemp
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, emp1 n, disemp e
  WHERE r.mgr = e.empno and n.empno = e.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([r.mgr = e.EMPno]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([cast(n.empno, DECIMAL(-1, -1)) = e.MGR]), other_conds(nil)
  10 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, emp1 n, disemp e
  WHERE r.mgr = e.empno and n.empno = e.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 16:
## - recursive WITH Query: Join Skew handling. No local filter
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |


WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 17:
## - recursive WITH Query: Join Skew handling with an additional local filter
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr and e.empno < e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |10       |179 |
|1 | RECURSIVE UNION ALL|    |10       |177 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |8        |127 |
|4 |   TABLE SCAN       |e   |5        |42  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.EMPno], [e.ENAME]), filter([e.EMPno < e.MGR]), 
      access([e.MGR], [e.EMPno], [e.ENAME]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr and e.empno < e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
+--------+-------+------+



##############################
##   section 3  聚合的两表在join条件上可能形成wise join（disemp，emp1）
##############################
##
##  emp1 也进行分布式化
drop table emp1;
CREATE TABLE emp1 (
   empno    VARCHAR(4000) NOT NULL,
   ename    VARCHAR(14),
   job      VARCHAR(9),
   mgr      VARCHAR(4000),
   hiredate DATE,
   sal      NUMBER(7,2),
   comm     NUMBER(7,2),
   deptno   NUMBER(2)
);

INSERT INTO emp1 values (7369, 'SMITH', 'CLERK', 7902, str_to_date('1980-12-17', '%Y-%m-%d'), 800, null, 20);
INSERT INTO emp1 values (7499, 'ALLEN', 'SALESMAN', 7698, str_to_date('1981-02-20', '%Y-%m-%d'), 1600, 300, 30);
INSERT INTO emp1 values (7521, 'WARD', 'SALESMAN', 7698, str_to_date('1981-02-22', '%Y-%m-%d'), 1250, 500, 30);
INSERT INTO emp1 values (7566, 'JONES', 'MANAGER', 7839, str_to_date('1981-08-02', '%Y-%m-%d'), 2975, null, 20);
INSERT INTO emp1 values (7654, 'MARTIN', 'SALESMAN', 7698, str_to_date('1981-09-28', '%Y-%m-%d'), 1250, 1400, 30);
INSERT INTO emp1 values (7698, 'BLAKE', 'MANAGER', 7839, str_to_date('1981-05-01', '%Y-%m-%d'), 2850, null, 30);
INSERT INTO emp1 values (7782, 'CLARK', 'MANAGER', 7839, str_to_date('1981-06-09' , '%Y-%m-%d'), 2450, null, 10);
INSERT INTO emp1 values (7788, 'SCOTT', 'ANALYST', 7566, str_to_date('1987-08-19', '%Y-%m-%d'), 3000, null, 20);
INSERT INTO emp1 values (7839, 'KING', 'PRESIDENT', null, str_to_date('1981-11-17', '%Y-%m-%d'), 5000, null, 10);
INSERT INTO emp1 values (7844, 'TURNER', 'SALESMAN', 7698, str_to_date('1981-09-08', '%Y-%m-%d'), 1500, 0, 30);
INSERT INTO emp1 values (7876, 'ADAMS', 'CLERK', 7788, str_to_date('1987-05-23', '%Y-%m-%d'), 1100, null, 20);
INSERT INTO emp1 values (7900, 'JAMES', 'CLERK', 7698, str_to_date('1981-12-03', '%Y-%m-%d'), 950, null, 30);
INSERT INTO emp1 values (7902, 'FORD', 'ANALYST', 7566, str_to_date('1981-12-03', '%Y-%m-%d'), 3000, null, 20);
INSERT INTO emp1 values (7934, 'MILLER', 'CLERK', 7782, str_to_date('1982-01-23', '%Y-%m-%d'), 1300, null, 10);
INSERT INTO emp1 values (8100, 'Eve', 'MANAGER', 7839, str_to_date('1984-05-01', '%Y-%m-%d'), 2850, null, 30);
INSERT INTO emp1 values (8101, 'Eve1', 'MANAGER', 8100, str_to_date('1984-05-01','%Y-%m-%d'), 2850, null, 30);
INSERT INTO emp1 values (8108, 'Eve8', 'CLERK', 8101, str_to_date('1984-05-01', '%Y-%m-%d'), 2850, null, 30);

## =======================================================================
## Test Case 1:
## - recursive WITH Query: Nested Loop Join
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_NL(r e) */  e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_NL(r e) */  e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 2:
## - recursive WITH Query: SORT MERGE Join
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_MERGE(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_MERGE(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 3:
## - recursive WITH Query: Hash Join
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT /*+log_level(DEBUG)*/ ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 4:
## - recursive WITH Query: Join in Initialisation Branch
## 与oracle的结果顺序不一样
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT /*+ USE_NL(e d) */ e.ename, e.mgr, e.empno
    FROM disemp e, disemp d 
    WHERE e.sal = d. sal
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e, disemp d
    WHERE r.empno = e.mgr and e.sal = d.sal
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |47       |374 |
|1 | RECURSIVE UNION ALL|    |47       |368 |
|2 |  HASH JOIN         |    |17       |110 |
|3 |   TABLE SCAN       |d   |14       |39  |
|4 |   TABLE SCAN       |e   |14       |40  |
|5 |  HASH JOIN         |    |30       |239 |
|6 |   HASH JOIN        |    |17       |110 |
|7 |    TABLE SCAN      |d   |14       |39  |
|8 |    TABLE SCAN      |e   |14       |40  |
|9 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([e.SAL = d.SAL]), other_conds(nil)
  3 - output([d.SAL]), filter(nil), 
      access([d.SAL]), partitions(p0)
  4 - output([e.SAL], [e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      access([e.SAL], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  5 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  6 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([e.SAL = d.SAL]), other_conds(nil)
  7 - output([d.SAL]), filter(nil), 
      access([d.SAL]), partitions(p0)
  8 - output([e.MGR], [e.SAL], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.SAL], [e.ENAME], [e.EMPno]), partitions(p0)
  9 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT /*+ USE_NL(e d) */ e.ename, e.mgr, e.empno
    FROM disemp e, disemp d 
    WHERE e.sal = d. sal
    UNION ALL
    SELECT /*+ USE_HASH(r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e, disemp d
    WHERE r.empno = e.mgr and e.sal = d.sal
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| SMITH  |  7369 | 7902 |
| ALLEN  |  7499 | 7698 |
| WARD   |  7521 | 7698 |
| WARD   |  7521 | 7698 |
| JONES  |  7566 | 7839 |
| MARTIN |  7654 | 7698 |
| MARTIN |  7654 | 7698 |
| BLAKE  |  7698 | 7839 |
| CLARK  |  7782 | 7839 |
| SCOTT  |  7788 | 7566 |
| SCOTT  |  7788 | 7566 |
| KING   |  7839 | NULL |
| TURNER |  7844 | 7698 |
| ADAMS  |  7876 | 7788 |
| JAMES  |  7900 | 7698 |
| FORD   |  7902 | 7566 |
| FORD   |  7902 | 7566 |
| MILLER |  7934 | 7782 |
| WARD   |  7521 | 7698 |
| SMITH  |  7369 | 7902 |
| SMITH  |  7369 | 7902 |
| JONES  |  7566 | 7839 |
| BLAKE  |  7698 | 7839 |
| CLARK  |  7782 | 7839 |
| ADAMS  |  7876 | 7788 |
| ADAMS  |  7876 | 7788 |
| MILLER |  7934 | 7782 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| WARD   |  7521 | 7698 |
| MARTIN |  7654 | 7698 |
| MARTIN |  7654 | 7698 |
| TURNER |  7844 | 7698 |
| JAMES  |  7900 | 7698 |
| SCOTT  |  7788 | 7566 |
| SCOTT  |  7788 | 7566 |
| FORD   |  7902 | 7566 |
| FORD   |  7902 | 7566 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SCOTT  |  7788 | 7566 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| MILLER |  7934 | 7782 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
| ADAMS  |  7876 | 7788 |
| SMITH  |  7369 | 7902 |
| SMITH  |  7369 | 7902 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 6:
## - recursive WITH Query: Hash Join without using hints
##                         Static input on build side and fits in memory
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM disemp e, rw r
    WHERE e.mgr = r.empno 
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = r.empno]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM disemp e, rw r
    WHERE e.mgr = r.empno 
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 7:
## - recursive WITH Query: Hash Join without using hints
##                         Static input on probe side and fits in memory
## =======================================================================
explain  
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## 测试8-15都是在测试join的顺序或者hint的顺序
## Test Case 8:
## - recursive WITH Query: Join Order tests 
##                         pump >< disemp >< emp1 
## =======================================================================
explain  
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, disemp e, emp1 n
  WHERE r.mgr = e.empno and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([r.mgr = e.EMPno]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = cast(n.empno, DECIMAL(-1, -1))]), other_conds(nil)
  10 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |



WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, disemp e, emp1 n
  WHERE r.mgr = e.empno and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 9:
## - recursive WITH Query: Join Order tests 
##                         disemp >< pump >< emp1 
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM disemp e, rw r, emp1 n
  WHERE e.empno = r.mgr and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([e.EMPno = r.mgr]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = cast(n.empno, DECIMAL(-1, -1))]), other_conds(nil)
  10 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |



WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM disemp e, rw r, emp1 n
  WHERE e.empno = r.mgr and e.mgr = n.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 10:
## - recursive WITH Query: Join Order tests 
##                         disemp >< emp1 >< pump  
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM disemp e, emp1 n, rw r
  WHERE e.mgr = n.empno and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([e.EMPno = r.mgr]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = cast(n.empno, DECIMAL(-1, -1))]), other_conds(nil)
  10 - output([e.MGR], [e.EMPno], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.MGR], [e.EMPno], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM disemp e, emp1 n, rw r
  WHERE e.mgr = n.empno and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 11:
## - recursive WITH Query: Join Order tests 
##                         emp1 >< disemp >< pump  
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, disemp e, rw r
  WHERE n.empno = e.mgr and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([e.EMPno = r.mgr]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([cast(n.empno, DECIMAL(-1, -1)) = e.MGR]), other_conds(nil)
  10 - output([e.MGR], [e.EMPno], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.MGR], [e.EMPno], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, disemp e, rw r
  WHERE n.empno = e.mgr and e.empno = r.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 12:
## - recursive WITH Query: Join Order tests 
##                         pump >< disemp
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 13:
## - recursive WITH Query: Join Order tests 
##                         disemp >< pump
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM  disemp e, rw r
    WHERE e.mgr = r.empno
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([e.MGR = r.empno]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |


WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ ORDERED  USE_HASH (r e) */ e.ename, e.mgr, e.empno
    FROM  disemp e, rw r
    WHERE e.mgr = r.empno
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| ALLEN  |  7499 | 7698 |
| WARD   |  7521 | 7698 |
| JAMES  |  7900 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 14:
## - recursive WITH Query: Join Order tests 
##                         emp1 >< pump >< disemp
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, rw r, disemp e
  WHERE n.empno = e.mgr and r.mgr = e.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([r.mgr = e.EMPno]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([cast(n.empno, DECIMAL(-1, -1)) = e.MGR]), other_conds(nil)
  10 - output([e.MGR], [e.EMPno], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.MGR], [e.EMPno], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |



WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, rw r, disemp e
  WHERE n.empno = e.mgr and r.mgr = e.empno and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 15:
## - recursive WITH Query: Join Order tests 
##                         pump >< emp1 >< disemp
## =======================================================================
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, emp1 n, disemp e
  WHERE r.mgr = e.empno and n.empno = e.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SORT                 |    |1        |308 |
|1 | SUBPLAN SCAN        |rw  |1        |307 |
|2 |  RECURSIVE UNION ALL|    |1        |307 |
|3 |   HASH JOIN         |    |1        |140 |
|4 |    HASH JOIN        |    |1        |93  |
|5 |     TABLE SCAN      |e   |5        |42  |
|6 |     TABLE SCAN      |n1  |17       |39  |
|7 |    TABLE SCAN       |n2  |17       |39  |
|8 |   HASH JOIN         |    |1        |167 |
|9 |    HASH JOIN        |    |1        |93  |
|10|     TABLE SCAN      |e   |5        |42  |
|11|     TABLE SCAN      |n   |17       |39  |
|12|    TABLE SCAN       |r   |1        |1   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([r.mgr = e.EMPno]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([cast(n.empno, DECIMAL(-1, -1)) = e.MGR]), other_conds(nil)
  10 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  11 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  12 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |



WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM rw r, emp1 n, disemp e
  WHERE r.mgr = e.empno and n.empno = e.mgr and e.empno < e.mgr
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7499 | 7839 |     2 | 4450.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7521 | 7839 |     2 | 4100.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7654 | 7839 |     2 | 4100.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

## =======================================================================
## Test Case 16:
## - recursive WITH Query: Join Skew handling. No local filter
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |28       |217 |
|1 | RECURSIVE UNION ALL|    |28       |213 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |26       |156 |
|4 |   TABLE SCAN       |e   |14       |39  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.ENAME], [e.EMPno]), filter(nil), 
      access([e.MGR], [e.ENAME], [e.EMPno]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MILLER |  7934 | 7782 |
| JAMES  |  7900 | 7698 |
| TURNER |  7844 | 7698 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
| FORD   |  7902 | 7566 |
| SCOTT  |  7788 | 7566 |
| SMITH  |  7369 | 7902 |
| ADAMS  |  7876 | 7788 |
+--------+-------+------+

## =======================================================================
## Test Case 17:
## - recursive WITH Query: Join Skew handling with an additional local filter
## =======================================================================
explain 
WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr and e.empno < e.mgr
)
SELECT ename, empno, mgr
FROM rw;

| Query Plan|

| =============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN SCAN        |rw  |10       |179 |
|1 | RECURSIVE UNION ALL|    |10       |177 |
|2 |  TABLE SCAN        |e   |3        |46  |
|3 |  HASH JOIN         |    |8        |127 |
|4 |   TABLE SCAN       |e   |5        |42  |
|5 |   TABLE SCAN       |r   |1        |1   |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.ename], [rw.empno], [rw.mgr]), filter(nil), 
      access([rw.ename], [rw.empno], [rw.mgr])
  1 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil)
  2 - output([e.ENAME], [e.MGR], [e.EMPno]), filter([e.JOB = 'PRESIDENT']), 
      access([e.JOB], [e.ENAME], [e.MGR], [e.EMPno]), partitions(p0)
  3 - output([e.ENAME], [e.MGR], [e.EMPno]), filter(nil), 
      equal_conds([r.empno = e.MGR]), other_conds(nil)
  4 - output([e.MGR], [e.EMPno], [e.ENAME]), filter([e.EMPno < e.MGR]), 
      access([e.MGR], [e.EMPno], [e.ENAME]), partitions(p0)
  5 - output([r.empno]), filter(nil), 
      access([r.empno]), partitions(nil)
 |



WITH rw (ename, mgr, empno) AS
(
    SELECT ename, mgr, empno
    FROM disemp e
    WHERE job = 'PRESIDENT'
    UNION ALL
    SELECT /*+ PQ_SKEW (r) */ e.ename, e.mgr, e.empno
    FROM rw r, disemp e
    WHERE r.empno = e.mgr and e.empno < e.mgr
)
SELECT ename, empno, mgr
FROM rw;
+--------+-------+------+
| ename  | empno | mgr  |
+--------+-------+------+
| KING   |  7839 | NULL |
| CLARK  |  7782 | 7839 |
| BLAKE  |  7698 | 7839 |
| JONES  |  7566 | 7839 |
| MARTIN |  7654 | 7698 |
| WARD   |  7521 | 7698 |
| ALLEN  |  7499 | 7698 |
+--------+-------+------+

##############################
##   section 4  额外添加recursive member变化
##############################
drop table t1;
create table t1(c1 int, c2 int, c3 int);
insert into t1 values(1, 2, 3);
insert into t1 values(4, 5, 6);
insert into t1 values(7, 8, 9);
insert into t1 values(10, 11, 12);
insert into t1 values(13, 14, 15);
insert into t1 values(16, 17, 18);
insert into t1 values(19, 20, 21);

create table disemp1 (
  EMPno  number,
  ENAME varchar(30),
  JOB varchar(30),
  MGR number(4),
  HIREDATE date,
  SAL number(7,2),
  COMM number(7,2),
  DEPTNO number(2)
);

INSERT INTO disemp1 values (7369,'SMITH','CLERK',7902,    str_to_date('1980-11-17','%Y-%m-%d'),800,NULL, 20) ;
INSERT INTO disemp1 VALUES (7499, 'ALLEN','SALESMAN',7698,str_to_date('1981-01-20','%Y-%m-%d'),1600,300,30) ;
INSERT INTO disemp1 VALUES (7521,'WARD','SALESMAN',7698,  str_to_date('1981-01-22','%Y-%m-%d'),1250, 500, 30) ;
INSERT INTO disemp1 VALUES (7566,'JONES','MANAGER',7839,  str_to_date('1981-04-02','%Y-%m-%d'), 2975, NULL, 20) ;
INSERT INTO disemp1 VALUES (7654,'MARTIN','SALESMAN', 7698, str_to_date('1981-09-28','%Y-%m-%d'), 1250, 1400, 30) ;
INSERT INTO disemp1 VALUES (7698, 'BLAKE','MANAGER', 7839,  str_to_date('1981-03-01','%Y-%m-%d'), 2850, NULL, 30) ;
INSERT INTO disemp1 VALUES (7782, 'CLARK','MANAGER', 7839,  str_to_date('1981-06-09','%Y-%m-%d'), 2450, NULL, 10) ;
insert into disemp1 values (7788,'SCOTT','ANALYST', 7566,   str_to_date('1987-04-19','%Y-%m-%d'), 3000, null, 20) ;
INSERT INTO disemp1 VALUES (7839, 'KING','PRESIDENT', NULL, str_to_date('1981-11-17','%Y-%m-%d'), 5000, NULL, 10) ;
INSERT INTO disemp1 VALUES (7844, 'TURNER','SALESMAN', 7698, str_to_date('1981-09-08','%Y-%m-%d'), 1500, 0, 30) ;
INSERT INTO disemp1 VALUES (7876, 'ADAMS','CLERK', 7788,     str_to_date('1987-05-23','%Y-%m-%d'), 1100, NULL, 20) ;
INSERT INTO disemp1 VALUES (7900, 'JAMES', 'CLEARK', 7698,   str_to_date('1981-11-03','%Y-%m-%d'), 950, NULL, 30) ;
INSERT INTO disemp1 VALUES (7902, 'FORD','ANALYST',7566,     str_to_date('1981-11-03','%Y-%m-%d'), 3000, NULL, 20) ;
INSERT INTO disemp1 VALUES (7934,'MILLER','CLERK', 7782,     str_to_date('1982-01-23','%Y-%m-%d'), 1300,NULL, 10) ;

##   这个case 测试了subplan filter
explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, disemp e, rw r
  WHERE n.empno = e.mgr and e.empno = r.mgr and e.empno = e.mgr and e.empno > some (select c1 from t1 group by c1)
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |

| ===================================================
|ID|OPERATOR                 |NAME |EST. ROWS|COST|
---------------------------------------------------
|0 |SORT                     |     |1        |344 |
|1 | SUBPLAN SCAN            |rw   |1        |344 |
|2 |  RECURSIVE UNION ALL    |     |1        |344 |
|3 |   HASH JOIN             |     |1        |140 |
|4 |    HASH JOIN            |     |1        |93  |
|5 |     TABLE SCAN          |e    |5        |42  |
|6 |     TABLE SCAN          |n1   |17       |39  |
|7 |    TABLE SCAN           |n2   |17       |39  |
|8 |   HASH JOIN             |     |1        |205 |
|9 |    NESTED-LOOP SEMI JOIN|     |1        |133 |
|10|     HASH JOIN           |     |1        |87  |
|11|      TABLE SCAN         |e    |1        |42  |
|12|      TABLE SCAN         |n    |17       |39  |
|13|     MATERIAL            |     |7        |47  |
|14|      SUBPLAN SCAN       |VIEW1|7        |45  |
|15|       MERGE GROUP BY    |     |7        |44  |
|16|        SORT             |     |7        |43  |
|17|         TABLE SCAN      |t1   |7        |38  |
|18|    TABLE SCAN           |r    |1        |1   |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([e.EMPno = r.mgr]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      conds([e.EMPno > VIEW1.c1]), nl_params_(nil)
  10 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([cast(n.empno, DECIMAL(-1, -1)) = e.MGR]), other_conds(nil)
  11 - output([e.MGR], [e.EMPno], [e.SAL]), filter([e.EMPno = e.MGR]), 
      access([e.MGR], [e.EMPno], [e.SAL]), partitions(p0)
  12 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  13 - output([VIEW1.c1]), filter(nil)
  14 - output([VIEW1.c1]), filter(nil), 
      access([VIEW1.c1])
  15 - output([cast(t1.c1, DECIMAL(11, 0))]), filter(nil), 
      group([t1.c1]), agg_func(nil)
  16 - output([t1.c1]), filter(nil), sort_keys([t1.c1, ASC])
  17 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  18 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |



WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, disemp e, rw r
  WHERE n.empno = e.mgr and e.empno = r.mgr and e.empno = e.mgr and e.empno > some (select c1 from t1 group by c1)
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+

explain 
WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, disemp e, rw r
  WHERE n.empno = e.mgr and e.empno = r.mgr and e.empno = e.mgr and e.empno > some (select c1 from t1 group by c1) and e.empno in (select e.empno from disemp1)
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;

| Query Plan|

| ===============================================================
|ID|OPERATOR                           |NAME   |EST. ROWS|COST|
---------------------------------------------------------------
|0 |SORT                               |       |1        |387 |
|1 | SUBPLAN SCAN                      |rw     |1        |387 |
|2 |  RECURSIVE UNION ALL              |       |1        |387 |
|3 |   HASH JOIN                       |       |1        |140 |
|4 |    HASH JOIN                      |       |1        |93  |
|5 |     TABLE SCAN                    |e      |5        |42  |
|6 |     TABLE SCAN                    |n1     |17       |39  |
|7 |    TABLE SCAN                     |n2     |17       |39  |
|8 |   HASH JOIN                       |       |1        |248 |
|9 |    NESTED-LOOP SEMI JOIN CARTESIAN|       |1        |176 |
|10|     NESTED-LOOP SEMI JOIN         |       |1        |136 |
|11|      HASH JOIN                    |       |1        |89  |
|12|       TABLE SCAN                  |e      |1        |44  |
|13|       TABLE SCAN                  |n      |17       |39  |
|14|      MATERIAL                     |       |7        |47  |
|15|       SUBPLAN SCAN                |VIEW1  |7        |45  |
|16|        MERGE GROUP BY             |       |7        |44  |
|17|         SORT                      |       |7        |43  |
|18|          TABLE SCAN               |t1     |7        |38  |
|19|     MATERIAL                      |       |14       |41  |
|20|      TABLE SCAN                   |disemp1|14       |38  |
|21|    TABLE SCAN                     |r      |1        |1   |
===============================================================

Outputs & filters: 
-------------------------------------
  0 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), sort_keys([rw.empno, ASC], [rw.iters, ASC])
  1 - output([rw.empno], [rw.mgr], [rw.iters], [rw.sal]), filter(nil), 
      access([rw.empno], [rw.mgr], [rw.iters], [rw.sal])
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])]), filter(nil)
  3 - output([e.EMPno], [e.MGR], [1], [e.SAL]), filter(nil), 
      equal_conds([e.MGR = cast(n2.empno, DECIMAL(-1, -1))]), other_conds(nil)
  4 - output([e.EMPno], [e.MGR], [e.SAL]), filter(nil), 
      equal_conds([e.EMPno = cast(n1.empno, DECIMAL(-1, -1))]), other_conds(nil)
  5 - output([e.EMPno], [e.MGR], [e.SAL]), filter([e.EMPno < e.MGR]), 
      access([e.EMPno], [e.MGR], [e.SAL]), partitions(p0)
  6 - output([cast(n1.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n1.empno]), partitions(p0)
  7 - output([cast(n2.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n2.empno]), partitions(p0)
  8 - output([r.empno], [e.MGR], [r.iters + 1], [r.sal + e.SAL]), filter(nil), 
      equal_conds([e.EMPno = r.mgr]), other_conds(nil)
  9 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      conds(nil), nl_params_(nil)
  10 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      conds([e.EMPno > VIEW1.c1]), nl_params_(nil)
  11 - output([e.MGR], [e.SAL], [e.EMPno]), filter(nil), 
      equal_conds([cast(n.empno, DECIMAL(-1, -1)) = e.MGR]), other_conds(nil)
  12 - output([e.MGR], [e.EMPno], [e.SAL]), filter([e.EMPno = e.MGR], [e.EMPno = e.EMPno]), 
      access([e.MGR], [e.EMPno], [e.SAL]), partitions(p0)
  13 - output([cast(n.empno, DECIMAL(-1, -1))]), filter(nil), 
      access([n.empno]), partitions(p0)
  14 - output([VIEW1.c1]), filter(nil)
  15 - output([VIEW1.c1]), filter(nil), 
      access([VIEW1.c1])
  16 - output([cast(t1.c1, DECIMAL(11, 0))]), filter(nil), 
      group([t1.c1]), agg_func(nil)
  17 - output([t1.c1]), filter(nil), sort_keys([t1.c1, ASC])
  18 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  19 - output([1]), filter(nil)
  20 - output([1]), filter(nil), 
      access([disemp1.__pk_increment]), partitions(p0)
  21 - output([r.mgr], [r.empno], [r.iters], [r.sal]), filter(nil), 
      access([r.mgr], [r.empno], [r.iters], [r.sal]), partitions(nil)
 |


WITH rw (empno, mgr, iters, sal) AS
  (
  SELECT e.empno, e.mgr, 1, e.sal
  FROM disemp e, emp1 n1, emp1 n2
  WHERE e.empno = n1.empno and e.mgr = n2.empno and e.empno < e.mgr
  UNION ALL
  SELECT /*+ ORDERED  USE_HASH (r e) */r.empno, e.mgr, r.iters + 1, r.sal + e.sal
  FROM emp1 n, disemp e, rw r
  WHERE n.empno = e.mgr and e.empno = r.mgr and e.empno = e.mgr and e.empno > some (select c1 from t1 group by c1) and e.empno in (select e.empno from disemp1)
  )
  SELECT *
  FROM rw
  ORDER BY 1, 3;
+-------+------+-------+---------+
| empno | mgr  | iters | sal     |
+-------+------+-------+---------+
|  7369 | 7902 |     1 |  800.00 |
|  7499 | 7698 |     1 | 1600.00 |
|  7521 | 7698 |     1 | 1250.00 |
|  7566 | 7839 |     1 | 2975.00 |
|  7654 | 7698 |     1 | 1250.00 |
|  7698 | 7839 |     1 | 2850.00 |
|  7782 | 7839 |     1 | 2450.00 |
+-------+------+-------+---------+
