# cases in MySQL document: https://dev.mysql.com/doc/refman/8.0/en/with.html

WITH RECURSIVE cte (n) AS
(
  SELECT 1
  UNION ALL
  SELECT n + 1 FROM cte WHERE n < 5
)
SELECT * FROM cte;

WITH RECURSIVE cte AS
(
  SELECT 1 AS n, CAST('abc' AS CHAR(20)) AS str
  UNION ALL
  SELECT n + 1, CONCAT(str, str) FROM cte WHERE n < 3
)
SELECT * FROM cte;

WITH RECURSIVE cte AS
(
  SELECT 1 AS n, 1 AS p, -1 AS q
  UNION ALL
  SELECT n + 1, q * 2, p * 2 FROM cte WHERE n < 5
)
SELECT * FROM cte;

WITH RECURSIVE fibonacci (n, fib_n, next_fib_n) AS
(
  SELECT 1, 0, 1
  UNION ALL
  SELECT n + 1, next_fib_n, fib_n + next_fib_n
    FROM fibonacci WHERE n < 10
)
SELECT * FROM fibonacci;

WITH RECURSIVE fibonacci (n, fib_n, next_fib_n) AS
(
  SELECT 1, 0, 1
  UNION ALL
  SELECT n + 1, next_fib_n, fib_n + next_fib_n
    FROM fibonacci WHERE n < 10
)
SELECT fib_n FROM fibonacci WHERE n = 8;

create table sales(date  DATE,price NUMBER(7,2));
insert into sales values(str_to_date('2017-01-03', '%Y-%m-%d'),100);
insert into sales values(str_to_date('2017-01-03', '%Y-%m-%d'),200);
insert into sales values(str_to_date('2017-01-06', '%Y-%m-%d'),50);
insert into sales values(str_to_date('2017-01-08', '%Y-%m-%d'),10);
insert into sales values(str_to_date('2017-01-08', '%Y-%m-%d'),20);
insert into sales values(str_to_date('2017-01-08', '%Y-%m-%d'),150);
insert into sales values(str_to_date('2017-01-10', '%Y-%m-%d'),5);

SELECT * FROM sales ORDER BY date, price;

SELECT date, SUM(price) AS sum_price
       FROM sales
       GROUP BY date
       ORDER BY date;

WITH RECURSIVE dates (date) AS
(
  SELECT MIN(date) FROM sales
  UNION ALL
  SELECT date + INTERVAL 1 DAY FROM dates
  WHERE date + INTERVAL 1 DAY <= (SELECT MAX(date) FROM sales)
)
SELECT * FROM dates;

WITH RECURSIVE dates (date) AS
(
  SELECT MIN(date) FROM sales
  UNION ALL
  SELECT date + INTERVAL 1 DAY FROM dates
  WHERE date + INTERVAL 1 DAY <= (SELECT MAX(date) FROM sales)
)
SELECT dates.date, COALESCE(SUM(price), 0) AS sum_price
FROM dates LEFT JOIN sales ON dates.date = sales.date
GROUP BY dates.date
ORDER BY dates.date;

################################################################################################
### PART 1   SQL syntax
################################################################################################

WITH cte1(txt) AS (SELECT "This "),
     cte2(txt) AS (SELECT CONCAT(cte1.txt,"is a ") FROM cte1),
     cte3(txt) AS (SELECT "nice query" UNION
                   SELECT "query that rocks" UNION
                   SELECT "query"),
     cte4(txt) AS (SELECT concat(cte2.txt, cte3.txt) FROM cte2, cte3)
SELECT MAX(txt), MIN(txt) FROM cte4;

WITH RECURSIVE my_cte AS
(
  SELECT 1 AS n
  UNION ALL
  SELECT 1+n FROM my_cte WHERE n<10
)
SELECT * FROM my_cte;

CREATE TABLE numbers
  WITH RECURSIVE my_cte(n) AS
  (
    SELECT 1
    UNION ALL
    SELECT 1+n FROM my_cte WHERE n<6
  )
  SELECT * FROM my_cte;
SELECT * FROM numbers;

INSERT INTO numbers
WITH RECURSIVE my_cte(n) AS
(
  SELECT 1
  UNION ALL
  SELECT 1+n FROM my_cte WHERE n<6
)
SELECT * FROM my_cte;

SELECT * FROM numbers;

DELETE FROM numbers
WHERE numbers.n >
  (
    WITH RECURSIVE my_cte(n) AS
    (
      SELECT 1
      UNION ALL
      SELECT 1+n FROM my_cte WHERE n<6
    )
    SELECT AVG(n)/2 FROM my_cte
  );
SELECT * FROM numbers;

################################################################################################
### PART 2   generating series
################################################################################################
WITH RECURSIVE my_cte AS
(
  SELECT 1 as f, 1 as next_f
  UNION ALL
  SELECT next_f, f+next_f FROM my_cte WHERE f < 500
)
SELECT * FROM my_cte;

WITH RECURSIVE
digits AS
(
  SELECT '0' AS d UNION ALL SELECT '1'
),
strings AS
(
  SELECT CAST('' AS CHAR(4)) AS s
  UNION ALL
  SELECT CONCAT(strings.s, digits.d)
  FROM strings, digits
  WHERE LENGTH(strings.s) < 4
)
SELECT * FROM strings WHERE LENGTH(s)=4;

################################################################################################
### PART 3  hierarchies
################################################################################################
CREATE TABLE category(
        category_id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(20) NOT NULL,
        parent INT DEFAULT NULL
);

INSERT INTO category VALUES(1,'ELECTRONICS',NULL),(2,'TELEVISIONS',1),(3,'TUBE',2),
        (4,'LCD',2),(5,'PLASMA',2),(6,'PORTABLE ELECTRONICS',1),(7,'MP3 PLAYERS',6),(8,'FLASH',7),
        (9,'CD PLAYERS',6),(10,'2 WAY RADIOS',6);

SELECT * FROM category ORDER BY category_id;

#Retrieving a Full Tree

WITH RECURSIVE cte AS
(
  # seed SELECT
  SELECT category_id, name FROM category WHERE parent IS NULL
  UNION ALL
  # recursive SELECT
  SELECT c.category_id, c.name FROM category c JOIN cte
  ON cte.category_id=c.parent # find children
)
SELECT category_id, name FROM cte;

WITH RECURSIVE cte AS
(
  SELECT category_id, name, 0 AS depth FROM category WHERE parent IS NULL
  UNION ALL
  SELECT c.category_id, c.name, cte.depth+1 FROM category c JOIN cte ON
    cte.category_id=c.parent
)
SELECT * FROM cte ORDER BY depth;

WITH RECURSIVE cte AS
(
  SELECT category_id, name, CAST(category_id AS CHAR(200)) AS path
  FROM category WHERE parent IS NULL
  UNION ALL
  SELECT c.category_id, c.name, CONCAT(cte.path, ",", c.category_id)
  FROM category c JOIN cte ON cte.category_id=c.parent
)
SELECT * FROM cte ORDER BY path;

#Finding all the leaf nodes

SELECT category_id, name FROM category
WHERE category_id NOT IN
  # IDs of all parents:
  (SELECT parent FROM category WHERE parent IS NOT NULL);

#Retrieving a Single Path

WITH RECURSIVE cte AS
(
  SELECT name, parent FROM category WHERE name='FLASH'
  UNION ALL
  SELECT c.name, c.parent FROM category c JOIN cte
  ON c.category_id=cte.parent # find parent
)
SELECT * FROM cte;

WITH RECURSIVE cte AS
(
  SELECT name, parent, 0 as depth FROM category WHERE name='FLASH'
  UNION ALL
  SELECT c.name, c.parent, cte.depth-1 FROM category c JOIN cte
  ON c.category_id=cte.parent
)
SELECT * FROM cte ORDER BY depth;

#Finding the Depth of the Nodes

WITH RECURSIVE cte AS
(
  SELECT category_id, CAST(name AS CHAR(200)) AS name,
         CAST(category_id AS CHAR(200)) AS path,
         0 as depth
  FROM category WHERE parent IS NULL
  UNION ALL
  SELECT c.category_id,
         CONCAT(REPEAT(' ', cte.depth+1), c.name), # indentation
         CONCAT(cte.path, ",", c.category_id),
         cte.depth+1
  FROM category c JOIN cte ON
  cte.category_id=c.parent
)
SELECT * FROM cte ORDER BY path;

#Depth of a sub-tree

WITH RECURSIVE cte AS
(
  SELECT category_id, name,
         CAST(category_id AS CHAR(200)) AS path,
         0 as depth
  FROM category WHERE name='PORTABLE ELECTRONICS' # sub-tree root
  UNION ALL
  SELECT c.category_id,
         c.name,
         CONCAT(cte.path, ",", c.category_id),
         cte.depth+1
  FROM category c JOIN cte
  ON cte.category_id=c.parent
)
SELECT * FROM cte ORDER BY path;

#Find the immediate subordinates of a node

WITH RECURSIVE cte AS
(
  SELECT category_id, name, 0 as depth
  FROM category WHERE name='PORTABLE ELECTRONICS'
  UNION ALL
  SELECT c.category_id, c.name, cte.depth+1
  FROM category c JOIN cte
  ON cte.category_id=c.parent
  WHERE cte.depth=0
)
SELECT * FROM cte;

#Aggregate functions in a nested set

CREATE TABLE product(
        category_id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(20) NOT NULL,
        parent INT DEFAULT NULL
);

INSERT INTO product VALUES(1,'ELECTRONICS',NULL),(2,'TELEVISIONS',1),(3,'TUBE',2),
        (4,'LCD',2),(5,'PLASMA',2),(6,'PORTABLE ELECTRONICS',1),(7,'MP3 PLAYERS',6),(8,'FLASH',7),
        (9,'CD PLAYERS',6),(10,'2 WAY RADIOS',6);


WITH RECURSIVE cte AS
(
  SELECT c.category_id, c.name AS cat_name, c.parent, p.name AS prod_name
  FROM category c JOIN product p ON c.category_id=p.category_id
  UNION ALL
  SELECT c.category_id, c.name, c.parent, cte.prod_name
  FROM cte JOIN category c ON c.category_id=cte.parent
)
SELECT cat_name, COUNT(*) AS prod_in_cat FROM cte
GROUP BY cat_name;


################################################################################################
### PART 4  depth-first or breadth-first traversal, transitive closure, cycle avoidance
################################################################################################

#Depth-first or breadth-first

CREATE TABLE tree (person CHAR(20), parent CHAR(20));
INSERT INTO tree VALUES
('Robert I', NULL),
('Thurimbert', 'Robert I'),
('Robert II', 'Thurimbert'),
('Cancor', 'Thurimbert'),
('Landrade', 'Thurimbert'),
('Ingramm', 'Thurimbert'),
('Robert III', 'Robert II'),
('Chaudegrand', 'Landrade'),
('Ermengarde', 'Ingramm');

WITH RECURSIVE descendants AS
(
SELECT person
FROM tree
WHERE person='Thurimbert'
UNION ALL
SELECT t.person
FROM descendants d, tree t
WHERE t.parent=d.person
)
SELECT * FROM descendants;

WITH RECURSIVE descendants AS
(
SELECT person, 1 as level
FROM tree
WHERE person='Thurimbert'
UNION ALL
SELECT t.person, d.level+1
FROM descendants d, tree t
WHERE t.parent=d.person
)
SELECT * FROM descendants ORDER BY level;

WITH RECURSIVE descendants AS
(
SELECT person, CAST(person AS CHAR(500)) AS path
FROM tree
WHERE person='Thurimbert'
UNION ALL
SELECT t.person, CONCAT(d.path, ',', t.person)
FROM descendants d, tree t
WHERE t.parent=d.person
)
SELECT * FROM descendants ORDER BY path;

#Computing transitive closures with simple cycle avoidance

CREATE TABLE rockets
(origin CHAR(20), destination CHAR(20), trip_time INT);
INSERT INTO rockets VALUES
('Earth', 'Mars', 2),
('Mars', 'Jupiter', 3),
('Jupiter', 'Saturn', 4);

WITH RECURSIVE all_destinations AS
(
SELECT destination AS planet
FROM rockets
WHERE origin='Earth'
UNION ALL
SELECT r.destination
FROM rockets r, all_destinations d
WHERE r.origin=d.planet
)
SELECT * FROM all_destinations;

INSERT INTO rockets VALUES ('Saturn', 'Earth', 9);

WITH RECURSIVE all_destinations AS
(
SELECT destination AS planet
FROM rockets
WHERE origin='Earth'
UNION ALL
SELECT r.destination
FROM rockets r, all_destinations d
WHERE r.origin=d.planet
)
SELECT * FROM all_destinations;

#More complex cycle avoidance

WITH RECURSIVE all_destinations AS
(
SELECT destination AS planet, trip_time AS total_time,
CAST(destination AS CHAR(500)) AS path
FROM rockets
WHERE origin='Earth'
UNION ALL
SELECT r.destination, d.total_time+r.trip_time,
CONCAT(d.path, ',', r.destination)
FROM rockets r, all_destinations d
WHERE r.origin=d.planet
AND FIND_IN_SET(r.destination, d.path)=0
)
SELECT * FROM all_destinations;


WITH RECURSIVE all_destinations AS
(
SELECT destination AS planet, trip_time AS total_time,
CAST(destination AS CHAR(500)) AS path, 0 AS is_cycle
FROM rockets
WHERE origin='Earth'
UNION ALL
SELECT r.destination, d.total_time+r.trip_time,
CONCAT(d.path, ',', r.destination),
FIND_IN_SET(r.destination, d.path)!=0
FROM rockets r, all_destinations d
WHERE r.origin=d.planet
AND is_cycle=0
)
SELECT * FROM all_destinations;

